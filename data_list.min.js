(function(y){y.fn.dataList=function(t){var s=y.extend({data:[],inputExtendClass:[],itemExtendClass:[],itemContainerSelector:null,name:"",optionExtendClass:[],placeholder:"",selectedValue:[],wrapExtendClass:[]},t);const r="data-list__wrap";const o="data-list__input";const i="data-list__options";const l="data-list__item";const e=()=>{if(!Array.isArray(s.data)){throw new Error('"data" must be a array')}for(const t of s.data){if(t===null||typeof t!=="object"||!t.hasOwnProperty("value")||!t.hasOwnProperty("text")){throw new Error('"data element" must be an object that has 2 properties value and text')}}if(!Array.isArray(s.inputExtendClass)){throw new Error('"inputClass" must be a array')}for(const e in s.inputExtendClass){if(e.trim()===o){throw new Error(`"inputClass" can not be ${o}`)}}if(!Array.isArray(s.itemExtendClass)){throw new Error('"itemClass" must be a array')}for(const e in s.itemExtendClass){if(e.trim()===l){throw new Error(`"itemClass" can not be ${l}`)}}if(!Array.isArray(s.optionExtendClass)){throw new Error('"optionClass" must be a array')}for(const e in s.optionExtendClass){if(e.trim()===i){throw new Error(`"optionClass" can not be ${i}`)}}if(!Array.isArray(s.wrapExtendClass)){throw new Error('"wrapClass" must be a array')}for(const e in s.wrapExtendClass){if(e.trim()===r){throw new Error(`"wrapClass" can not be ${r}`)}}if(!Array.isArray(s.selectedValue)){throw new Error('"selectedValue" must be a array')}};var c,n,d,u,a;const f=()=>{c=this.find(`.${r}`);n=this.find(`.${o}`);d=this.find(`.${i}`);u=this.find(`.${i} li`);a=this.find(`.${l}`)};const p=()=>{let t=r;if(s.wrapExtendClass.length>0){t=t+" "+s.wrapExtendClass.join(" ")}let e=o;if(s.inputExtendClass.length>0){e=e+" "+s.inputExtendClass.join(" ")}let a=i;if(s.optionExtendClass.length>0){a=a+" "+s.optionExtendClass.join(" ")}this.empty().html(`<div class="${t}">
                        <input type="text" class="${e}" placeholder="${s.placeholder}" autocomplete="off">
                        <ul class="${a}"></ul>
                    </div>`);f();if(s.selectedValue.length>0){for(const n of s.data){if(s.selectedValue.includes(n.value)){h(n.value,n.text)}}}f()};const h=(t,e)=>{let a=l;if(s.itemExtendClass.length>0){a=a+" "+s.itemExtendClass.join(" ")}const n=`
                <span class="${a}" data-value="${t}">
                    ${e}
                    <input type="text" name="${s.name}" value="${t}" style="display: none;">
                    <span class="close" onclick="this.closest('.${l}').remove()">&#10006;</span>
                </span>
            `;y(n).insertBefore(s.itemContainerSelector===null?c:y(s.itemContainerSelector))};const m=()=>{let t=n.val().trim().toLowerCase();if(t===""){return s.data}const e=[];for(const a of s.data){if(a.text.toLowerCase().includes(t)){e.push(a)}}return e};const w=()=>{d.empty();const t=m();let e="";for(const a of t){e+=`<li data-value="${a.value}">${a.text}</li>`}d.html(e);f();u.off("click").on("click",function(){const t=y(this).data("value");const e=y(this).text();if(y(`.${l}[data-value="${t}"]`).length>0){return}h(t,e);n.val("")})};var C={init:function(){e();p();n.on("focus",function(){w();d.css("display","block")}).on("blur",function(){setTimeout(()=>{d.css("display","none")},100)});n.on("keyup",function(){w()})}};C.init();return this}})(jQuery);